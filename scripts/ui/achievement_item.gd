extends HBoxContainer

class_name AchievementListItem

@onready var icon_label: Label = $Icon
@onready var name_label: Label = $Info/Name
@onready var description_label: Label = $Info/Description
@onready var progress_bar: ProgressBar = $Info/ProgressRow/ProgressBar
@onready var progress_text: Label = $Info/ProgressRow/ProgressText
@onready var reward_label: Label = $Info/Reward
@onready var status_label: Label = $Status

var achievement: Achievement
var _is_ready: bool = false

func _ready() -> void:
	_is_ready = true
	if achievement != null:
		_refresh()
	else:
		pass

func setup(achievement_data: Achievement) -> void:
	achievement = achievement_data
	if _is_ready:
		_refresh()
	else:
		call_deferred("_refresh")

func _refresh() -> void:
	if achievement == null:
		return

	if icon_label == null or name_label == null or description_label == null:
		# –£–∑–ª—ã –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã; –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ –∫–∞–¥—Ä–∞
		call_deferred("_refresh")
		return
	icon_label.text = achievement.icon
	name_label.text = achievement.name
	description_label.text = achievement.get_description_with_target()

	var current := 0
	match achievement.type:
		"cumulative_clicks":
			current = AchievementManager.progress.cumulative_clicks
		"total_currency":
			current = AchievementManager.progress.total_currency
		"upgrades_purchased":
			current = AchievementManager.progress.upgrades_purchased
		"total_levels":
			current = AchievementManager.progress.total_levels

	var target := int(achievement.target)
	progress_bar.max_value = max(1, target)
	progress_bar.value = clamp(current, 0, target)
	progress_text.text = str(min(current, target), "/", target)

	if achievement.is_unlocked:
		status_label.text = "‚úÖ"
		reward_label.text = "–ü–æ–ª—É—á–µ–Ω–æ"
	else:
		status_label.text = "üîí"
		reward_label.text = "–ù–∞–≥—Ä–∞–¥–∞: " + _format_reward()
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	if achievement.is_unlocked:
		_apply_unlocked_style()
	else:
		_apply_locked_style()

func _format_reward() -> String:
	match achievement.reward_type:
		"currency":
			return "+%d –≤–∞–ª—é—Ç—ã" % int(achievement.reward_amount)
		"multiplier":
			return "x" + str(achievement.reward_amount)
		"unlock":
			return "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
		_:
			return ""

func _apply_unlocked_style() -> void:
	# –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
	modulate = Color.WHITE
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
	icon_label.modulate = Color.WHITE
	name_label.modulate = Color.WHITE
	description_label.modulate = Color.WHITE
	progress_bar.modulate = Color.WHITE
	progress_text.modulate = Color.WHITE
	reward_label.modulate = Color.WHITE
	status_label.modulate = Color.WHITE

func _apply_locked_style() -> void:
	# –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
	var locked_color = Color(0.7, 0.7, 0.7, 0.8)  # –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–µ—Ä—ã–π
	modulate = Color.WHITE  # –û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–ª—ã–º
	icon_label.modulate = locked_color
	name_label.modulate = locked_color
	description_label.modulate = locked_color
	progress_bar.modulate = locked_color
	progress_text.modulate = locked_color
	reward_label.modulate = locked_color
	status_label.modulate = locked_color
