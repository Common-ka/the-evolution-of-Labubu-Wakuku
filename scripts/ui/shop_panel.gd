extends Control

# –ú–∞–≥–∞–∑–∏–Ω –∞–ø–≥—Ä–µ–π–¥–æ–≤: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ JSON –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∑–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
# –¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–∫–ª–∞–¥–æ–∫

var upgrades: Dictionary = {}
var categories: Dictionary = {}
var current_category: String = ""
var active_tab_index: int = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É

# @onready var upgrade_stats_container: VBoxContainer = $Panel/Margin/VBox/TabContainer/–ê–ø–≥—Ä–µ–π–¥—ã/UpgradeStats/VBoxContainer
@onready var close_button: Button = $Panel/Margin/VBox/CloseButton
@onready var overlay: ColorRect = $Overlay
@onready var panel: Panel = $Panel
@onready var tab_container: TabContainer = $Panel/Margin/VBox/TabContainer

var _show_tween: Tween
var _hide_tween: Tween
const SHOW_DURATION := 0.22
const HIDE_DURATION := 0.18
const SCALE_MIN := 0.95

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
const BUTTON_HOVER_SCALE := 1.05
const BUTTON_PRESS_SCALE := 0.95
const BUTTON_ANIM_DURATION := 0.15
const BUTTON_DISABLED_ALPHA := 0.6
const BUTTON_ENABLED_ALPHA := 1.0

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORY_BUTTON_HEIGHT := 40
const CATEGORY_BUTTON_MARGIN := 8

func _ready() -> void:
	close_button.pressed.connect(_on_close_pressed)
	tab_container.tab_changed.connect(_on_tab_changed)
	
	_prepare_initial_state()
	
	_load_upgrades()
	_setup_categories()
	_render_items()
	# _render_upgrade_stats()

func _on_close_pressed() -> void:
	animate_hide()

func _on_tab_changed(tab: int) -> void:
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
	active_tab_index = tab
	
	print("[ShopPanel] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ", tab, " –∏–∑ ", tab_container.get_tab_count())
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
	var current_tab = tab_container.get_current_tab_control()
	if not current_tab:
		print("[ShopPanel] _on_tab_changed: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏")
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤–∫–ª–∞–¥–∫–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
	if not current_tab.has_meta("list_container") or not current_tab.has_meta("category_id"):
		print("[ShopPanel] _on_tab_changed: —É –≤–∫–ª–∞–¥–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ: ", current_tab.name)
		return
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
	# if tab == tab_container.get_tab_count() - 1: # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∫–ª–∞–¥–∫–∞ - "–ê–ø–≥—Ä–µ–π–¥—ã"
	# 	print("[ShopPanel] –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ø–≥—Ä–µ–π–¥–æ–≤")
	# 	_render_upgrade_stats()
	# else: # –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	print("[ShopPanel] –†–µ–Ω–¥–µ—Ä–∏–º –∞–ø–≥—Ä–µ–π–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
	_render_items()

func _prepare_initial_state() -> void:
	overlay.visible = true
	overlay.modulate.a = 0.0
	overlay.mouse_filter = Control.MOUSE_FILTER_STOP
	panel.visible = true
	panel.scale = Vector2(SCALE_MIN, SCALE_MIN)
	panel.modulate.a = 0.0
	animate_show()

func animate_show() -> void:
	if _hide_tween:
		_hide_tween.kill()
	if _show_tween:
		_show_tween.kill()
	_show_tween = create_tween()
	_show_tween.set_parallel(true)
	_show_tween.tween_property(overlay, "modulate:a", 1.0, SHOW_DURATION).set_ease(Tween.EASE_OUT)
	_show_tween.tween_property(panel, "modulate:a", 1.0, SHOW_DURATION).set_ease(Tween.EASE_OUT)
	_show_tween.tween_property(panel, "scale", Vector2(1, 1), SHOW_DURATION).set_ease(Tween.EASE_OUT)

func animate_hide() -> void:
	if _show_tween:
		_show_tween.kill()
	if _hide_tween:
		_hide_tween.kill()
	_hide_tween = create_tween()
	_hide_tween.set_parallel(true)
	_hide_tween.tween_property(overlay, "modulate:a", 0.0, HIDE_DURATION).set_ease(Tween.EASE_IN)
	_hide_tween.tween_property(panel, "modulate:a", 0.0, HIDE_DURATION).set_ease(Tween.EASE_IN)
	_hide_tween.tween_property(panel, "scale", Vector2(SCALE_MIN, SCALE_MIN), HIDE_DURATION).set_ease(Tween.EASE_IN)
	_hide_tween.finished.connect(func(): queue_free())

func _load_upgrades() -> void:
	var path := "res://data/upgrades.json"
	if not FileAccess.file_exists(path):
		push_warning("upgrades.json not found: %s" % path)
		upgrades = {}
		categories = {}
		return
	var f := FileAccess.open(path, FileAccess.READ)
	if not f:
		upgrades = {}
		categories = {}
		return
	var txt := f.get_as_text()
	f.close()
	var json := JSON.new()
	if json.parse(txt) == OK:
		var data = json.data
		upgrades = {}
		categories = data.get("categories", {})
		
		print("[ShopPanel] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", categories.keys())
		print("[ShopPanel] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–ø–≥—Ä–µ–π–¥—ã: ", upgrades.keys())
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–ø–≥—Ä–µ–π–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–µ–∫—Ü–∏—é categories)
		for key in data.keys():
			if key != "categories":
				upgrades[key] = data[key]
		
		print("[ShopPanel] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥—ã: ", upgrades.keys())
	else:
		push_warning("Failed to parse upgrades.json")
		upgrades = {}
		categories = {}

func _setup_categories() -> void:
	print("[ShopPanel] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
	print("[ShopPanel] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", categories.keys())
	
	# –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫—Ä–æ–º–µ "–ê–ø–≥—Ä–µ–π–¥—ã"
	# while tab_container.get_tab_count() > 1:
	# 	tab_container.remove_child(tab_container.get_child(1))
	
	# –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏
	while tab_container.get_tab_count() > 0:
		tab_container.remove_child(tab_container.get_child(0))
	
	# –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
	var category_order = ["click_upgrades", "auto_click_upgrades", "multiplier_upgrades"]
	
	# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	for category_id in category_order:
		print("[ShopPanel] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", category_id)
		if categories.has(category_id):
			print("[ShopPanel] –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è: ", category_id)
			_create_category_tab(category_id)
		else:
			print("[ShopPanel] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ", category_id)
	
	print("[ShopPanel] –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: ", tab_container.get_tab_count())
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
	if active_tab_index < tab_container.get_tab_count():
		tab_container.current_tab = active_tab_index
	else:
		tab_container.current_tab = 0
		active_tab_index = 0

func _create_category_tab(category_id: String) -> void:
	var category_data = categories[category_id]
	print("[ShopPanel] –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", category_id)
	print("[ShopPanel] –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", category_data)
	
	# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
	var tab_container_node = VBoxContainer.new()
	tab_container_node.name = category_id
	
	# –°–æ–∑–¥–∞–µ–º ScrollContainer –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
	var scroll_container = ScrollContainer.new()
	scroll_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	
	# –°–æ–∑–¥–∞–µ–º VBoxContainer –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	var vbox_container = VBoxContainer.new()
	vbox_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	scroll_container.add_child(vbox_container)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é
	tab_container_node.add_child(scroll_container)
	tab_container.add_child(tab_container_node)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ —Å –∏–∫–æ–Ω–∫–æ–π
	var tab_title = category_data.get("icon", "üì¶")
	tab_container.set_tab_title(tab_container.get_tab_count() - 1, tab_title)
	
	# –î–æ–±–∞–≤–ª—è–µ–º tooltip –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var tab_index = tab_container.get_tab_count() - 1
	tab_container.set_tab_tooltip(tab_index, category_data.get("name", category_id))
	
	print("[ShopPanel] –°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: ", tab_title, " –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", category_data.get("name", category_id))
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
	tab_container_node.set_meta("list_container", vbox_container)
	tab_container_node.set_meta("category_id", category_id)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	print("[ShopPanel] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: ", category_id)
	print("[ShopPanel] list_container —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", tab_container_node.has_meta("list_container"))
	print("[ShopPanel] category_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", tab_container_node.has_meta("category_id"))

func _render_items() -> void:
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
	var current_tab = tab_container.get_current_tab_control()
	if not current_tab:
		print("[ShopPanel] _render_items: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏")
		return
	
	print("[ShopPanel] _render_items: –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: ", current_tab.name)
	print("[ShopPanel] _render_items: –∫–ª–∞—Å—Å –≤–∫–ª–∞–¥–∫–∏: ", current_tab.get_class())
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	# if current_tab.name == "–ê–ø–≥—Ä–µ–π–¥—ã":
	# 	print("[ShopPanel] _render_items: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
	# 	return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤–∫–ª–∞–¥–∫–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
	if not current_tab.has_meta("list_container") or not current_tab.has_meta("category_id"):
		print("[ShopPanel] _render_items: —É –≤–∫–ª–∞–¥–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ: ", current_tab.name)
		print("[ShopPanel] _render_items: list_container: ", current_tab.has_meta("list_container"))
		print("[ShopPanel] _render_items: category_id: ", current_tab.has_meta("category_id"))
		print("[ShopPanel] _render_items: –≤—Å–µ –º–µ—Ç–∞-–∫–ª—é—á–∏: ", current_tab.get_meta_list())
		return
	
	# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
	var list_container = current_tab.get_meta("list_container", null)
	if not list_container:
		print("[ShopPanel] _render_items: –Ω–µ—Ç list_container –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: ", current_tab.name)
		return
	
	# –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	for child in list_container.get_children():
		child.queue_free()
	
	# –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var category_id = current_tab.get_meta("category_id", "")
	if category_id.is_empty():
		return
	
	# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var category_data = categories.get(category_id, {})
	if category_data.is_empty():
		return
	
	# –ü–æ–ª—É—á–∞–µ–º –∞–ø–≥—Ä–µ–π–¥—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var category_upgrades = _get_upgrades_by_category(category_id)
	print("[ShopPanel] –ù–∞–π–¥–µ–Ω–æ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ", category_id, ": ", category_upgrades.size())
	
	# –†–µ–Ω–¥–µ—Ä–∏–º –∞–ø–≥—Ä–µ–π–¥—ã
	for upg_id in category_upgrades:
		print("[ShopPanel] –†–µ–Ω–¥–µ—Ä–∏–º –∞–ø–≥—Ä–µ–π–¥: ", upg_id)
		var upgrade_item = _render_upgrade_item(upg_id, upgrades[upg_id], category_data)
		list_container.add_child(upgrade_item)

func _get_upgrades_by_category(category_id: String) -> Array:
	var result: Array = []
	print("[ShopPanel] –ü–æ–∏—Å–∫ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", category_id)
	print("[ShopPanel] –í—Å–µ–≥–æ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: ", upgrades.size())
	
	for upg_id in upgrades.keys():
		var data: Dictionary = upgrades[upg_id]
		var upgrade_category = data.get("category", "")
		print("[ShopPanel] –ê–ø–≥—Ä–µ–π–¥ ", upg_id, " –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", upgrade_category)
		if upgrade_category == category_id:
			result.append(upg_id)
			print("[ShopPanel] –î–æ–±–∞–≤–ª–µ–Ω –∞–ø–≥—Ä–µ–π–¥: ", upg_id)
	
	print("[ShopPanel] –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ", category_id, ": ", result.size())
	return result

func _render_upgrade_item(upg_id: String, data: Dictionary, category_data: Dictionary) -> Control:
	var h := HBoxContainer.new()
	h.custom_minimum_size = Vector2(0, 40)
	h.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	# –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var icon_label := Label.new()
	icon_label.text = category_data.get("icon", "üì¶")
	icon_label.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	icon_label.custom_minimum_size = Vector2(20, 0)
	h.add_child(icon_label)
	
	# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ø–≥—Ä–µ–π–¥–µ
	var info_container := VBoxContainer.new()
	info_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	info_container.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	
	var name_label := Label.new()
	name_label.text = "%s (—É—Ä.%d)" % [String(data.get("name", upg_id)), GameManager.get_upgrade_level(upg_id)]
	name_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	name_label.clip_contents = true
	info_container.add_child(name_label)
	
	if data.has("description"):
		var desc_label := Label.new()
		desc_label.text = String(data.get("description", ""))
		desc_label.modulate = Color(0.8, 0.8, 0.8, 1.0)
		desc_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
		desc_label.clip_contents = true
		desc_label.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
		info_container.add_child(desc_label)
	
	h.add_child(info_container)
	
	# –°—Ç–æ–∏–º–æ—Å—Ç—å
	var cost: int = _calc_cost(upg_id, data)
	var cost_label := Label.new()
	cost_label.text = "%d üí∞" % cost
	cost_label.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	cost_label.custom_minimum_size = Vector2(50, 0)
	h.add_child(cost_label)
	
	# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
	var buy := Button.new()
	buy.text = "–ö—É–ø–∏—Ç—å"
	buy.disabled = GameManager.current_currency < cost or GameManager.get_upgrade_level(upg_id) >= int(data.get("max_level", 1))
	buy.pressed.connect(func(): _on_buy_pressed(upg_id))
	buy.custom_minimum_size = Vector2(60, 28)
	buy.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
	_setup_button_animations(buy)
	
	h.add_child(buy)
	
	return h

# func _render_upgrade_stats() -> void:
# 	for child in upgrade_stats_container.get_children():
# 		child.queue_free()
# 	
# 	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# 	var stats_header := Label.new()
# 	stats_header.text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤"
# 	stats_header.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
# 	stats_header.size_flags_horizontal = Control.SIZE_EXPAND_FILL
# 	upgrade_stats_container.add_child(stats_header)
# 	
# 	# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
# 	var separator := HSeparator.new()
# 	upgrade_stats_container.add_child(separator)
# 	
# 	# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# 	var total_upgrades := 0
# 	var total_levels := 0
# 	var total_spent := 0
# 	
# 	for upg_id in upgrades.keys():
# 		var level = GameManager.get_upgrade_level(upg_id)
# 		if level > 0:
# 			total_upgrades += 1
# 			total_levels += level
# 			# –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
# 			var data = upgrades[upg_id]
# 			var base_cost = float(data.get("base_cost", 0))
# 			var growth = float(data.get("growth", 1.0))
# 			for i in range(level):
# 				total_spent += int(base_cost * pow(growth, i))
# 	
# 	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
# 	var stats_container := VBoxContainer.new()
# 	stats_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
# 	
# 	var total_label := Label.new()
# 	total_label.text = "–í—Å–µ–≥–æ –∞–ø–≥—Ä–µ–π–¥–æ–≤: %d" % total_upgrades
# 	stats_container.add_child(total_label)
# 	
# 	var levels_label := Label.new()
# 	levels_label.text = "–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: %d" % total_levels
# 	stats_container.add_child(levels_label)
# 	
# 	var spent_label := Label.new()
# 	spent_label.text = "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤–∞–ª—é—Ç—ã: %d" % total_spent
# 	stats_container.add_child(spent_label)
# 	
# 	upgrade_stats_container.add_child(stats_container)

func _calc_cost(upg_id: String, data: Dictionary) -> int:
	var lvl := GameManager.get_upgrade_level(upg_id)
	var base_cost := float(data.get("base_cost", 1))
	var growth := float(data.get("growth", 1.0))
	return int(floor(base_cost * pow(growth, lvl)))

func _on_buy_pressed(upg_id: String) -> void:
	var data: Dictionary = upgrades.get(upg_id, {})
	if data.is_empty():
		return
	var cost := _calc_cost(upg_id, data)
	if not GameManager.spend_currency(cost):
		return
	# –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
	GameManager.increment_upgrade_level(upg_id)
	# –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
	var stat := String(data.get("stat", ""))
	var value := float(data.get("value", 0.0))
	if stat != "":
		print("[ShopPanel] purchase ", upg_id, ": applying ", stat, " +", value)
		GameManager.apply_upgrade_effect(stat, value)
		print("[ShopPanel] after apply: click_multiplier=", GameManager.click_multiplier, ", level=", GameManager.get_upgrade_level(upg_id))
	EventBus.emit_signal("upgrade_purchased", upg_id)
	_render_items()
	# _render_upgrade_stats()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏
func _setup_button_animations(button: Button) -> void:
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
	button.mouse_entered.connect(func(): _on_button_mouse_entered(button))
	button.mouse_exited.connect(func(): _on_button_mouse_exited(button))
	button.button_down.connect(func(): _on_button_pressed_visual(button))
	button.button_up.connect(func(): _on_button_released_visual(button))
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	button.modulate.a = BUTTON_ENABLED_ALPHA if not button.disabled else BUTTON_DISABLED_ALPHA

# –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
func _on_button_mouse_entered(button: Button) -> void:
	if button.disabled:
		return
	
	var tween = create_tween()
	tween.tween_property(button, "scale", Vector2(BUTTON_HOVER_SCALE, BUTTON_HOVER_SCALE), BUTTON_ANIM_DURATION).set_ease(Tween.EASE_OUT)

# –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏ —Å –∫–Ω–æ–ø–∫–∏
func _on_button_mouse_exited(button: Button) -> void:
	if button.disabled:
		return
	
	var tween = create_tween()
	tween.tween_property(button, "scale", Vector2.ONE, BUTTON_ANIM_DURATION).set_ease(Tween.EASE_OUT)

# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
func _on_button_pressed_visual(button: Button) -> void:
	if button.disabled:
		return
	
	var tween = create_tween()
	tween.tween_property(button, "scale", Vector2(BUTTON_PRESS_SCALE, BUTTON_PRESS_SCALE), BUTTON_ANIM_DURATION * 0.5).set_ease(Tween.EASE_OUT)

# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
func _on_button_released_visual(button: Button) -> void:
	if button.disabled:
		return
	
	var tween = create_tween()
	tween.tween_property(button, "scale", Vector2(BUTTON_HOVER_SCALE, BUTTON_HOVER_SCALE), BUTTON_ANIM_DURATION * 0.5).set_ease(Tween.EASE_OUT)
